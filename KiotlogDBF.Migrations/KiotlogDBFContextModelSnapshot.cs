// <auto-generated />
using System;
using KiotlogDBF.Context;
using KiotlogDBF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace KiotlogDBF.Migrations
{
    [DbContext(typeof(KiotlogDBFContext))]
    partial class KiotlogDBFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("KiotlogDBF.Models.Annotations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Begin")
                        .HasColumnName("begin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("End")
                        .HasColumnName("end")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("annotations_pkey");

                    b.HasIndex("DeviceId");

                    b.ToTable("annotations");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Conversions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Fun")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fun")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'id'::text");

                    b.HasKey("Id")
                        .HasName("convertions_pkey");

                    b.ToTable("conversions");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Devices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonTypes.DevicesAuth>("Auth")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.DevicesAuth, string>(v => default(string), v => default(JsonTypes.DevicesAuth)))
                        .HasColumnName("auth")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("json_build_object('klsn', json_build_object('key', encode(gen_random_bytes(32), 'base64')), 'basic', json_build_object('token', encode(gen_random_bytes(32), 'base64')))");

                    b.Property<string>("Device")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("device")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'device'");

                    b.Property<JsonTypes.DevicesFrame>("Frame")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.DevicesFrame, string>(v => default(string), v => default(JsonTypes.DevicesFrame)))
                        .HasColumnName("frame")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql(" '{\"bigendian\": true, \"bitfields\": false}'::jsonb ");

                    b.Property<JsonTypes.DevicesMeta>("Meta")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.DevicesMeta, string>(v => default(string), v => default(JsonTypes.DevicesMeta)))
                        .HasColumnName("meta")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.HasKey("Id")
                        .HasName("devices_pkey");

                    b.HasAlternateKey("Device")
                        .HasName("devices_device_key");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Points", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Data")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("data")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("flags")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time")
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("points_pkey");

                    b.HasIndex("DeviceId");

                    b.ToTable("points");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Sensors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ConversionId")
                        .HasColumnName("conversion_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("uuid");

                    b.Property<JsonTypes.SensorsFmt>("Fmt")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.SensorsFmt, string>(v => default(string), v => default(JsonTypes.SensorsFmt)))
                        .HasColumnName("fmt")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<JsonTypes.SensorsMeta>("Meta")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.SensorsMeta, string>(v => default(string), v => default(JsonTypes.SensorsMeta)))
                        .HasColumnName("meta")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<Guid>("SensorTypeId")
                        .HasColumnName("sensor_type_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("sensors_pkey");

                    b.HasIndex("ConversionId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("sensors");
                });

            modelBuilder.Entity("KiotlogDBF.Models.SensorTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonTypes.SensorTypesMeta>("Meta")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.SensorTypesMeta, string>(v => default(string), v => default(JsonTypes.SensorTypesMeta)))
                        .HasColumnName("meta")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'generic'::text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'generic'::text");

                    b.HasKey("Id")
                        .HasName("sensor_types_pkey");

                    b.HasAlternateKey("Name")
                        .HasName("sensor_types_name_key");

                    b.ToTable("sensor_types");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Tenants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonTypes.TenantMeta>("Meta")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.TenantMeta, string>(v => default(string), v => default(JsonTypes.TenantMeta)))
                        .HasColumnName("meta")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tenant")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.HasKey("Id")
                        .HasName("tenants_pkey");

                    b.HasAlternateKey("Tenant");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("KiotlogDBF.Models.TenantUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tenant_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("tenant_users_pkey");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("tenant_users");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonTypes.UserAuth>("Auth")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.UserAuth, string>(v => default(string), v => default(JsonTypes.UserAuth)))
                        .HasColumnName("auth")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("json_build_object('passwd', encode(gen_random_bytes(32), 'base64'))");

                    b.Property<JsonTypes.UserMeta>("Meta")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<JsonTypes.UserMeta, string>(v => default(string), v => default(JsonTypes.UserMeta)))
                        .HasColumnName("meta")
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("username")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasAlternateKey("Username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("KiotlogDBF.Models.Annotations", b =>
                {
                    b.HasOne("KiotlogDBF.Models.Devices", "Device")
                        .WithMany("Annotations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KiotlogDBF.Models.Points", b =>
                {
                    b.HasOne("KiotlogDBF.Models.Devices", "Device")
                        .WithMany("Points")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("points_device_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("KiotlogDBF.Models.Sensors", b =>
                {
                    b.HasOne("KiotlogDBF.Models.Conversions", "Conversion")
                        .WithMany("Sensors")
                        .HasForeignKey("ConversionId")
                        .HasConstraintName("sensors_conversion_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiotlogDBF.Models.Devices", "Device")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("sensors_device_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiotlogDBF.Models.SensorTypes", "SensorType")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorTypeId")
                        .HasConstraintName("sensors_sensor_type_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KiotlogDBF.Models.TenantUsers", b =>
                {
                    b.HasOne("KiotlogDBF.Models.Tenants", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("tenant_users_tenant_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiotlogDBF.Models.Users", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("tenant_users_user_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
